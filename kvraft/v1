//server.go
package kvraft

import (
	"log"
	"sync"
	"sync/atomic"
	"time"

	"6.5840/labgob"
	"6.5840/labrpc"
	"6.5840/raft"
)

const TimeoutDur = 500 * time.Millisecond
const Debug = true

func DPrintf(format string, a ...interface{}) (n int, err error) {
	if Debug {
		log.Printf(format, a...)
	}
	return
}

type Op struct {
	// Your definitions here.
	// Field names must start with capital letters,
	// otherwise RPC will break.
	ClientId int64
	Version  int
	OpType   string
	Key      string
	Value    string
}

type KVServer struct {
	mu      sync.Mutex
	me      int
	rf      *raft.Raft
	applyCh chan raft.ApplyMsg
	dead    int32 // set by Kill()

	maxraftstate int // snapshot if log grows this big

	// Your definitions here.
	stateMemory map[string]string
	//notifyChanMap map[int]chan *CommonReply
	// lastVersionMap map[int]
	informcha     map[int]chan *Result //key：对应的entry的index  value：返回的处理结果
	newesthistory map[int64](*Result)  //key: ClientID     value：对应客户端的最新一次请求处理结果
	persist       *raft.Persister
	lastApplied   int
}

func (kv *KVServer) Get(args *GetArgs, reply *GetReply) {
	// Your code here.
	_, isLeader := kv.rf.GetState()
	if !isLeader {
		reply.Err = ErrWrongLeader
		return
	}
	op := &Op{
		Version:  args.Version,
		ClientId: args.ClientId,
		OpType:   "Get",
		Key:      args.Key,
	}
	res := kv.SendRequest(*op)
	reply.Err = res.ErrType
	reply.Value = res.Value

}

func (kv *KVServer) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {
	// Your code here.
	_, isLeader := kv.rf.GetState()
	if !isLeader {
		reply.Err = ErrWrongLeader
		return
	}
	kv.mu.Lock()
	if kv.isOldRequest(args.ClientId, args.Version) {
		reply.Err = OK
		kv.mu.Unlock()
		return
	}
	kv.mu.Unlock()

	op := &Op{
		Version:  args.Version,
		ClientId: args.ClientId,
		OpType:   args.Op,
		Key:      args.Key,
		Value:    args.Value,
	}

	res := kv.SendRequest(*op)
	reply.Err = res.ErrType
}

// the tester calls Kill() when a KVServer instance won't
// be needed again. for your convenience, we supply
// code to set rf.dead (without needing a lock),
// and a killed() method to test rf.dead in
// long-running loops. you can also add your own
// code to Kill(). you're not required to do anything
// about this, but it may be convenient (for example)
// to suppress debug output from a Kill()ed instance.
func (kv *KVServer) Kill() {
	atomic.StoreInt32(&kv.dead, 1)
	kv.rf.Kill()
	// Your code here, if desired.
}

func (kv *KVServer) killed() bool {
	z := atomic.LoadInt32(&kv.dead)
	return z == 1
}

// servers[] contains the ports of the set of
// servers that will cooperate via Raft to
// form the fault-tolerant key/value service.
// me is the index of the current server in servers[].
// the k/v server should store snapshots through the underlying Raft
// implementation, which should call persister.SaveStateAndSnapshot() to
// atomically save the Raft state along with the snapshot.
// the k/v server should snapshot when Raft's saved state exceeds maxraftstate bytes,
// in order to allow Raft to garbage-collect its log. if maxraftstate is -1,
// you don't need to snapshot.
// StartKVServer() must return quickly, so it should start goroutines
// for any long-running work.
func StartKVServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int) *KVServer {
	// call labgob.Register on structures you want
	// Go's RPC library to marshall/unmarshall.
	labgob.Register(Op{})

	kv := new(KVServer)
	kv.me = me
	kv.maxraftstate = maxraftstate

	// You may need initialization code here.

	kv.applyCh = make(chan raft.ApplyMsg)
	kv.rf = raft.Make(servers, me, persister, kv.applyCh)

	// You may need initialization code here.
	kv.stateMemory = make(map[string]string)
	kv.informcha = make(map[int]chan *Result)
	kv.newesthistory = make(map[int64]*Result)
	kv.persist = persister

	go kv.appier()
	return kv
}

func (kv *KVServer) SendRequest(op Op) *Result {
	Index, _, isLeader := kv.rf.Start(op)
	if !isLeader {
		return &Result{
			ErrType: ErrWrongLeader,
		}
	}

	kv.mu.Lock()
	newinformcha := make(chan *Result)
	kv.informcha[Index] = newinformcha
	//kv.
	kv.mu.Unlock()
	defer func() {
		kv.mu.Lock()
		delete(kv.informcha, Index)
		close(newinformcha)
		kv.mu.Unlock()
	}()
	select {
	case <-time.After(TimeoutDur):
		return &Result{
			ErrType: ErrTimeOut,
		}
	case res := <-newinformcha:
		res.ErrType = OK
		return res
	}

}

func (kv *KVServer) appier() {
	for !kv.killed() {
		applyMsg := <-kv.applyCh

		if applyMsg.CommandValid {

			op := applyMsg.Command.(Op)
			kv.mu.Lock()
			res := Result{}
			if record, exist := kv.newesthistory[op.ClientId]; exist {
				if record.Version == op.Version {
					res = *record
				} else if record.Version < op.Version {
					//创建新历史记录
					res = *kv.createNewhistory(&op)
				}
			} else {
				//创建新历史记录
				res = *kv.createNewhistory(&op)
			}

			currentTerm, isLeader := kv.rf.GetState()
			// infomeChan, ok := kv.informcha[applyMsg.CommandIndex]
			// if ok {
			// 	infomeChan <- &res
			// }
			if isLeader && applyMsg.CommandTerm == currentTerm {
				infomeChan, ok := kv.informcha[applyMsg.CommandIndex]
				if ok {
					infomeChan <- &res
				}
			}
			kv.mu.Unlock()

		}

	}
}

var i int = 0

func (kv *KVServer) applyLog2DB(op *Op) *Result {
	reply := &Result{}
	switch op.OpType {
	case "Get":
		reply.Value = kv.stateMemory[op.Key]
		return reply
	case "Put":
		kv.stateMemory[op.Key] = op.Value
		return reply
	case "Append":
		// if kv.isOldRequest(op.ClientId, op.Version) {
		// 	return reply
		// }
		value, exist := kv.stateMemory[op.Key]
		if exist {
			//DPrintf("append <%v-%v>", op.Key, op.Value)
			i++
			kv.stateMemory[op.Key] = value + op.Value
			return reply
		} else {
			kv.stateMemory[op.Key] = op.Value
			return reply
		}
	}
	return reply
}

func (kv *KVServer) createNewhistory(op *Op) *Result {
	res := &Result{}
	res = kv.applyLog2DB(op)
	kv.newesthistory[op.ClientId] = res
	return res
}

func (kv *KVServer) isOldRequest(clientId int64, version int) bool {
	if result, ok := kv.newesthistory[clientId]; ok {
		if version <= result.Version {
			return true
		}
	}

	return false
}


//client.go
package kvraft

import (
	"crypto/rand"
	"math/big"

	"6.5840/labrpc"
)

type Clerk struct {
	servers []*labrpc.ClientEnd
	// You will have to modify this struct.
	ClerkId  int64
	Version  int
	LeaderId int
}

func nrand() int64 {
	max := big.NewInt(int64(1) << 62)
	bigx, _ := rand.Int(rand.Reader, max)
	x := bigx.Int64()
	return x
}

func MakeClerk(servers []*labrpc.ClientEnd) *Clerk {
	ck := new(Clerk)
	ck.servers = servers
	// You'll have to add code here.
	ck.ClerkId = nrand()
	ck.LeaderId = 0
	ck.Version = 0
	return ck
}

// fetch the current value for a key.
// returns "" if the key does not exist.
// keeps trying forever in the face of all other errors.
//
// you can send an RPC with code like this:
// ok := ck.servers[i].Call("KVServer.Get", &args, &reply)
//
// the types of args and reply (including whether they are pointers)
// must match the declared types of the RPC handler function's
// arguments. and reply must be passed as a pointer.
func (ck *Clerk) Get(key string) string {
	args := &GetArgs{
		Key:      key,
		Version:  ck.Version,
		ClientId: ck.ClerkId,
	}
	reply := &GetReply{}
	ret := ""
	// You will have to modify this function.
	for {
		if ck.servers[ck.LeaderId].Call("KVServer.Get", args, reply) {
			switch reply.Err {
			case ErrWrongLeader, ErrTimeOut:
				ck.LeaderId = (ck.LeaderId + 1) % len(ck.servers)
				break
			case ErrNoKey, OK:
				ret = reply.Value
				ck.Version += 1
				return ret
			}
		} else {
			ck.LeaderId = (ck.LeaderId + 1) % len(ck.servers)
		}
	}
	return ""
}

// shared by Put and Append.
//
// you can send an RPC with code like this:
// ok := ck.servers[i].Call("KVServer.PutAppend", &args, &reply)
//
// the types of args and reply (including whether they are pointers)
// must match the declared types of the RPC handler function's
// arguments. and reply must be passed as a pointer.
func (ck *Clerk) PutAppend(key string, value string, op string) {
	// You will have to modify this function.
	args := &PutAppendArgs{
		Key:      key,
		Value:    value,
		Op:       op,
		Version:  ck.Version,
		ClientId: ck.ClerkId,
	}
	reply := &PutAppendReply{}
	for {
		if ck.servers[ck.LeaderId].Call("KVServer.PutAppend", args, reply) {
			switch reply.Err {
			case ErrWrongLeader, ErrTimeOut:
				ck.LeaderId = (ck.LeaderId + 1) % len(ck.servers)
				break
			case ErrNoKey, OK:
				//DPrintf("append %v", args.Value)
				ck.Version += 1
				return
			}
		} else {
			ck.LeaderId = (ck.LeaderId + 1) % len(ck.servers)
		}
	}
}

func (ck *Clerk) Put(key string, value string) {
	ck.PutAppend(key, value, "Put")
}
func (ck *Clerk) Append(key string, value string) {
	ck.PutAppend(key, value, "Append")
}


//common.go
package kvraft

const (
	OK             = "OK"
	ErrNoKey       = "ErrNoKey"
	ErrWrongLeader = "ErrWrongLeader"
	ErrTimeOut     = "ErrTimeOut"
)

// const (
// 	GetCommand    = 0
// 	PutCommand    = 1
// 	AppendCommand = 2
// )

type Err string

// Put or Append
type PutAppendArgs struct {
	Key   string
	Value string
	Op    string // "Get" "Put" or "Append"
	// You'll have to add definitions here.
	// Field names must start with capital letters,
	// otherwise RPC will break.
	Version  int
	ClientId int64
}

type PutAppendReply struct {
	Err Err
}

type GetArgs struct {
	Key string
	// You'll have to add definitions here.
	Version  int
	ClientId int64
}

type GetReply struct {
	Err   Err
	Value string
}

type Result struct {
	Value   string
	Version int
	ErrType Err
}

